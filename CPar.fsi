// Signature file for parser generated by fsyacc
module CPar
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | QUES
  | COLON
  | POINT
  | BITAND
  | BITOR
  | BITXOR
  | BITLEFT
  | BITRIGHT
  | BITNOT
  | PLUSASSIGN
  | MINUSASSIGN
  | TIMESASSIGN
  | DIVASSIGN
  | MODASSIGN
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | SELFINC
  | SELFDEC
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | MAX
  | MIN
  | TRY
  | CATCH
  | THROW
  | STRUCT
  | BOOL
  | BREAK
  | CASE
  | CHAR
  | CONTINUE
  | DEFAULT
  | DO
  | ELSE
  | FLOAT
  | FOR
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | PRINTF
  | RETURN
  | STRING
  | SWITCH
  | VOID
  | WHILE
  | CSTFLOAT of (float32)
  | CSTCHAR of (char)
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_QUES
    | TOKEN_COLON
    | TOKEN_POINT
    | TOKEN_BITAND
    | TOKEN_BITOR
    | TOKEN_BITXOR
    | TOKEN_BITLEFT
    | TOKEN_BITRIGHT
    | TOKEN_BITNOT
    | TOKEN_PLUSASSIGN
    | TOKEN_MINUSASSIGN
    | TOKEN_TIMESASSIGN
    | TOKEN_DIVASSIGN
    | TOKEN_MODASSIGN
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_SELFINC
    | TOKEN_SELFDEC
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_MAX
    | TOKEN_MIN
    | TOKEN_TRY
    | TOKEN_CATCH
    | TOKEN_THROW
    | TOKEN_STRUCT
    | TOKEN_BOOL
    | TOKEN_BREAK
    | TOKEN_CASE
    | TOKEN_CHAR
    | TOKEN_CONTINUE
    | TOKEN_DEFAULT
    | TOKEN_DO
    | TOKEN_ELSE
    | TOKEN_FLOAT
    | TOKEN_FOR
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_PRINTF
    | TOKEN_RETURN
    | TOKEN_STRING
    | TOKEN_SWITCH
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_CSTFLOAT
    | TOKEN_CSTCHAR
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_VardecAndAssign
    | NONTERM_Vardesc
    | NONTERM_Structdec
    | NONTERM_MemberDefList
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_CaseStmt
    | NONTERM_CatchStmt
    | NONTERM_EXCEPTION
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_PrintfExpr
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_ConstChar
    | NONTERM_ConstString
    | NONTERM_ConstFloat
    | NONTERM_Type
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Absyn.program) 
